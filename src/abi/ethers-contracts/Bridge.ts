/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeInterface extends utils.Interface {
  contractName: "Bridge";
  functions: {
    "EXCHANGER_NAME()": FunctionFragment;
    "EXCHANGE_RATES_NAME()": FunctionFragment;
    "MAX_UINT256()": FunctionFragment;
    "MAX_UINT8()": FunctionFragment;
    "SYNTHETIX_RESOLVER()": FunctionFragment;
    "SYNTH_SWAPPER_MASTER()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "calcCompleteToToken(uint256,uint256)": FunctionFragment;
    "calcSynthToToken(address,bytes32,uint8,uint256)": FunctionFragment;
    "calcTokenToSynth(address,uint8,bytes32,uint256)": FunctionFragment;
    "calcTokenToToken(address[2],uint8,uint8,uint256)": FunctionFragment;
    "completeToSynth(uint256)": FunctionFragment;
    "completeToToken(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exchanger()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getPendingSwapInfo(uint256)": FunctionFragment;
    "getProxyAddressFromTargetSynthKey(bytes32)": FunctionFragment;
    "getSynthAddress(address)": FunctionFragment;
    "getSynthIndex(address)": FunctionFragment;
    "getSynthKey(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pendingSwapsLength()": FunctionFragment;
    "pendingToSynthSwaps(uint256)": FunctionFragment;
    "pendingToTokenSwaps(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setSynthIndex(address,uint8,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "synthToToken(address,bytes32,uint8,uint256,uint256)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenToSynth(address,uint8,bytes32,uint256,uint256)": FunctionFragment;
    "tokenToToken(address[2],uint8,uint8,uint256,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateExchangerCache()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXCHANGER_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_RATES_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_UINT8", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SYNTHETIX_RESOLVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYNTH_SWAPPER_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcCompleteToToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSynthToToken",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenToSynth",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokenToToken",
    values: [[string, string], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeToSynth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeToToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exchanger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingSwapInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAddressFromTargetSynthKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynthAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynthIndex",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getSynthKey", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSwapsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingToSynthSwaps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingToTokenSwaps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynthIndex",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "synthToToken",
    values: [string, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToSynth",
    values: [string, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToToken",
    values: [
      [string, string],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangerCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXCHANGER_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATES_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT8", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SYNTHETIX_RESOLVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYNTH_SWAPPER_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcCompleteToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSynthToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenToSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokenToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeToSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchanger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingSwapInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAddressFromTargetSynthKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSynthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSynthIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSynthKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSwapsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingToSynthSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingToTokenSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynthIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "synthToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangerCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Settle(address,uint256,address,uint256,address,uint256,bool)": EventFragment;
    "SynthIndex(address,uint8,bytes32,address)": EventFragment;
    "SynthToToken(address,uint256,address,bytes32,uint256,uint8)": EventFragment;
    "TokenToSynth(address,uint256,address,uint8,uint256,bytes32)": EventFragment;
    "TokenToToken(address,uint256,address[2],uint8,uint256,uint8)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenToSynth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenToToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type SettleEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, BigNumber, boolean],
  {
    requester: string;
    itemId: BigNumber;
    settleFrom: string;
    settleFromAmount: BigNumber;
    settleTo: string;
    settleToAmount: BigNumber;
    isFinal: boolean;
  }
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export type SynthIndexEvent = TypedEvent<
  [string, number, string, string],
  {
    swap: string;
    synthIndex: number;
    currencyKey: string;
    synthAddress: string;
  }
>;

export type SynthIndexEventFilter = TypedEventFilter<SynthIndexEvent>;

export type SynthToTokenEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, number],
  {
    requester: string;
    itemId: BigNumber;
    swapPool: string;
    synthFromKey: string;
    synthFromInAmount: BigNumber;
    tokenToIndex: number;
  }
>;

export type SynthToTokenEventFilter = TypedEventFilter<SynthToTokenEvent>;

export type TokenToSynthEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber, string],
  {
    requester: string;
    itemId: BigNumber;
    swapPool: string;
    tokenFromIndex: number;
    tokenFromInAmount: BigNumber;
    synthToKey: string;
  }
>;

export type TokenToSynthEventFilter = TypedEventFilter<TokenToSynthEvent>;

export type TokenToTokenEvent = TypedEvent<
  [string, BigNumber, [string, string], number, BigNumber, number],
  {
    requester: string;
    itemId: BigNumber;
    swapPools: [string, string];
    tokenFromIndex: number;
    tokenFromAmount: BigNumber;
    tokenToIndex: number;
  }
>;

export type TokenToTokenEventFilter = TypedEventFilter<TokenToTokenEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, boolean],
  {
    requester: string;
    itemId: BigNumber;
    synth: string;
    synthAmount: BigNumber;
    isFinal: boolean;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Bridge extends BaseContract {
  contractName: "Bridge";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXCHANGER_NAME(overrides?: CallOverrides): Promise<[string]>;

    EXCHANGE_RATES_NAME(overrides?: CallOverrides): Promise<[string]>;

    MAX_UINT256(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_UINT8(overrides?: CallOverrides): Promise<[number]>;

    SYNTHETIX_RESOLVER(overrides?: CallOverrides): Promise<[string]>;

    SYNTH_SWAPPER_MASTER(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    calcCompleteToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSynthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcTokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    completeToSynth(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchanger(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPendingSwapInfo(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, BigNumber, string] & {
        swapType: number;
        secsLeft: BigNumber;
        synth: string;
        synthBalance: BigNumber;
        tokenTo: string;
      }
    >;

    getProxyAddressFromTargetSynthKey(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSynthAddress(swap: string, overrides?: CallOverrides): Promise<[string]>;

    getSynthIndex(swap: string, overrides?: CallOverrides): Promise<[number]>;

    getSynthKey(swap: string, overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingSwapsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingToSynthSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { swapper: string; synthKey: string }>;

    pendingToTokenSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        swapper: string;
        synthKey: string;
        swap: string;
        tokenToIndex: number;
      }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSynthIndex(
      swap: string,
      synthIndex: BigNumberish,
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    synthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExchangerCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EXCHANGER_NAME(overrides?: CallOverrides): Promise<string>;

  EXCHANGE_RATES_NAME(overrides?: CallOverrides): Promise<string>;

  MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_UINT8(overrides?: CallOverrides): Promise<number>;

  SYNTHETIX_RESOLVER(overrides?: CallOverrides): Promise<string>;

  SYNTH_SWAPPER_MASTER(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  calcCompleteToToken(
    itemId: BigNumberish,
    swapAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSynthToToken(
    swap: string,
    synthInKey: BytesLike,
    tokenToIndex: BigNumberish,
    synthInAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calcTokenToSynth(
    swap: string,
    tokenFromIndex: BigNumberish,
    synthOutKey: BytesLike,
    tokenInAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokenToToken(
    swaps: [string, string],
    tokenFromIndex: BigNumberish,
    tokenToIndex: BigNumberish,
    tokenFromAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  completeToSynth(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeToToken(
    itemId: BigNumberish,
    swapAmount: BigNumberish,
    minAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchanger(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPendingSwapInfo(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string, BigNumber, string] & {
      swapType: number;
      secsLeft: BigNumber;
      synth: string;
      synthBalance: BigNumber;
      tokenTo: string;
    }
  >;

  getProxyAddressFromTargetSynthKey(
    synthKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSynthAddress(swap: string, overrides?: CallOverrides): Promise<string>;

  getSynthIndex(swap: string, overrides?: CallOverrides): Promise<number>;

  getSynthKey(swap: string, overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pendingSwapsLength(overrides?: CallOverrides): Promise<BigNumber>;

  pendingToSynthSwaps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { swapper: string; synthKey: string }>;

  pendingToTokenSwaps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number] & {
      swapper: string;
      synthKey: string;
      swap: string;
      tokenToIndex: number;
    }
  >;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSynthIndex(
    swap: string,
    synthIndex: BigNumberish,
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  synthToToken(
    swap: string,
    synthInKey: BytesLike,
    tokenToIndex: BigNumberish,
    synthInAmount: BigNumberish,
    minMediumSynthAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToSynth(
    swap: string,
    tokenFromIndex: BigNumberish,
    synthOutKey: BytesLike,
    tokenInAmount: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToToken(
    swaps: [string, string],
    tokenFromIndex: BigNumberish,
    tokenToIndex: BigNumberish,
    tokenFromAmount: BigNumberish,
    minMediumSynthAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExchangerCache(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    itemId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXCHANGER_NAME(overrides?: CallOverrides): Promise<string>;

    EXCHANGE_RATES_NAME(overrides?: CallOverrides): Promise<string>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT8(overrides?: CallOverrides): Promise<number>;

    SYNTHETIX_RESOLVER(overrides?: CallOverrides): Promise<string>;

    SYNTH_SWAPPER_MASTER(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    calcCompleteToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSynthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcTokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    completeToSynth(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchanger(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPendingSwapInfo(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, BigNumber, string] & {
        swapType: number;
        secsLeft: BigNumber;
        synth: string;
        synthBalance: BigNumber;
        tokenTo: string;
      }
    >;

    getProxyAddressFromTargetSynthKey(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSynthAddress(swap: string, overrides?: CallOverrides): Promise<string>;

    getSynthIndex(swap: string, overrides?: CallOverrides): Promise<number>;

    getSynthKey(swap: string, overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pendingSwapsLength(overrides?: CallOverrides): Promise<BigNumber>;

    pendingToSynthSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { swapper: string; synthKey: string }>;

    pendingToTokenSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        swapper: string;
        synthKey: string;
        swap: string;
        tokenToIndex: number;
      }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSynthIndex(
      swap: string,
      synthIndex: BigNumberish,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    synthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangerCache(overrides?: CallOverrides): Promise<void>;

    withdraw(
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Settle(address,uint256,address,uint256,address,uint256,bool)"(
      requester?: string | null,
      itemId?: BigNumberish | null,
      settleFrom?: null,
      settleFromAmount?: null,
      settleTo?: null,
      settleToAmount?: null,
      isFinal?: null
    ): SettleEventFilter;
    Settle(
      requester?: string | null,
      itemId?: BigNumberish | null,
      settleFrom?: null,
      settleFromAmount?: null,
      settleTo?: null,
      settleToAmount?: null,
      isFinal?: null
    ): SettleEventFilter;

    "SynthIndex(address,uint8,bytes32,address)"(
      swap?: string | null,
      synthIndex?: null,
      currencyKey?: null,
      synthAddress?: null
    ): SynthIndexEventFilter;
    SynthIndex(
      swap?: string | null,
      synthIndex?: null,
      currencyKey?: null,
      synthAddress?: null
    ): SynthIndexEventFilter;

    "SynthToToken(address,uint256,address,bytes32,uint256,uint8)"(
      requester?: string | null,
      itemId?: BigNumberish | null,
      swapPool?: null,
      synthFromKey?: null,
      synthFromInAmount?: null,
      tokenToIndex?: null
    ): SynthToTokenEventFilter;
    SynthToToken(
      requester?: string | null,
      itemId?: BigNumberish | null,
      swapPool?: null,
      synthFromKey?: null,
      synthFromInAmount?: null,
      tokenToIndex?: null
    ): SynthToTokenEventFilter;

    "TokenToSynth(address,uint256,address,uint8,uint256,bytes32)"(
      requester?: string | null,
      itemId?: BigNumberish | null,
      swapPool?: null,
      tokenFromIndex?: null,
      tokenFromInAmount?: null,
      synthToKey?: null
    ): TokenToSynthEventFilter;
    TokenToSynth(
      requester?: string | null,
      itemId?: BigNumberish | null,
      swapPool?: null,
      tokenFromIndex?: null,
      tokenFromInAmount?: null,
      synthToKey?: null
    ): TokenToSynthEventFilter;

    "TokenToToken(address,uint256,address[2],uint8,uint256,uint8)"(
      requester?: string | null,
      itemId?: BigNumberish | null,
      swapPools?: null,
      tokenFromIndex?: null,
      tokenFromAmount?: null,
      tokenToIndex?: null
    ): TokenToTokenEventFilter;
    TokenToToken(
      requester?: string | null,
      itemId?: BigNumberish | null,
      swapPools?: null,
      tokenFromIndex?: null,
      tokenFromAmount?: null,
      tokenToIndex?: null
    ): TokenToTokenEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Withdraw(address,uint256,address,uint256,bool)"(
      requester?: string | null,
      itemId?: BigNumberish | null,
      synth?: null,
      synthAmount?: null,
      isFinal?: null
    ): WithdrawEventFilter;
    Withdraw(
      requester?: string | null,
      itemId?: BigNumberish | null,
      synth?: null,
      synthAmount?: null,
      isFinal?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    EXCHANGER_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_RATES_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT8(overrides?: CallOverrides): Promise<BigNumber>;

    SYNTHETIX_RESOLVER(overrides?: CallOverrides): Promise<BigNumber>;

    SYNTH_SWAPPER_MASTER(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    calcCompleteToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSynthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeToSynth(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchanger(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingSwapInfo(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyAddressFromTargetSynthKey(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynthAddress(
      swap: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSynthIndex(swap: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSynthKey(swap: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingSwapsLength(overrides?: CallOverrides): Promise<BigNumber>;

    pendingToSynthSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingToTokenSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSynthIndex(
      swap: string,
      synthIndex: BigNumberish,
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    synthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExchangerCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXCHANGER_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EXCHANGE_RATES_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_UINT256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SYNTHETIX_RESOLVER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SYNTH_SWAPPER_MASTER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcCompleteToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSynthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeToSynth(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeToToken(
      itemId: BigNumberish,
      swapAmount: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchanger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingSwapInfo(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyAddressFromTargetSynthKey(
      synthKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynthAddress(
      swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynthIndex(
      swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSynthKey(
      swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingSwapsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingToSynthSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingToTokenSwaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSynthIndex(
      swap: string,
      synthIndex: BigNumberish,
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synthToToken(
      swap: string,
      synthInKey: BytesLike,
      tokenToIndex: BigNumberish,
      synthInAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToSynth(
      swap: string,
      tokenFromIndex: BigNumberish,
      synthOutKey: BytesLike,
      tokenInAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToToken(
      swaps: [string, string],
      tokenFromIndex: BigNumberish,
      tokenToIndex: BigNumberish,
      tokenFromAmount: BigNumberish,
      minMediumSynthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangerCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      itemId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

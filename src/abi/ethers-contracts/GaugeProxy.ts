/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GaugeProxyInterface extends utils.Interface {
  contractName: "GaugeProxy";
  functions: {
    "Axial()": FunctionFragment;
    "DISTRIBUTION_DEADLINE()": FunctionFragment;
    "MCAV2()": FunctionFragment;
    "acceptGovernance()": FunctionFragment;
    "addDeployer(address)": FunctionFragment;
    "addGauge(address)": FunctionFragment;
    "axialDummyToken()": FunctionFragment;
    "collect()": FunctionFragment;
    "deployers(address)": FunctionFragment;
    "depositDummyToken()": FunctionFragment;
    "deprecateGauge(address)": FunctionFragment;
    "deprecated(address)": FunctionFragment;
    "distribute(uint256,uint256)": FunctionFragment;
    "gauges(address)": FunctionFragment;
    "getGauge(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "length()": FunctionFragment;
    "migrateGauge(address,address)": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "pid()": FunctionFragment;
    "poke(address)": FunctionFragment;
    "preDistribute()": FunctionFragment;
    "removeDeployer(address)": FunctionFragment;
    "renewGauge(address)": FunctionFragment;
    "reset()": FunctionFragment;
    "sAxial()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMasterChef(address)": FunctionFragment;
    "setPID(uint256)": FunctionFragment;
    "tokenVote(address,uint256)": FunctionFragment;
    "tokens()": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "usedWeights(address)": FunctionFragment;
    "veAxial()": FunctionFragment;
    "vote(address[],uint256[])": FunctionFragment;
    "votes(address,address)": FunctionFragment;
    "weights(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Axial", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTION_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MCAV2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addDeployer", values: [string]): string;
  encodeFunctionData(functionFragment: "addGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "axialDummyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositDummyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateGauge",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deprecated", values: [string]): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gauges", values: [string]): string;
  encodeFunctionData(functionFragment: "getGauge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateGauge",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "preDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeployer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "renewGauge", values: [string]): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(functionFragment: "sAxial", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterChef",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usedWeights", values: [string]): string;
  encodeFunctionData(functionFragment: "veAxial", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "weights", values: [string]): string;

  decodeFunctionResult(functionFragment: "Axial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MCAV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "axialDummyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDummyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecateGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deprecated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sAxial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "veAxial", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;

  events: {};
}

export interface GaugeProxy extends BaseContract {
  contractName: "GaugeProxy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaugeProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Axial(overrides?: CallOverrides): Promise<[string]>;

    DISTRIBUTION_DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCAV2(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDeployer(
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    axialDummyToken(overrides?: CallOverrides): Promise<[string]>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    depositDummyToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecated(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    distribute(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateGauge(
      _gauge: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    poke(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preDistribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDeployer(
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sAxial(overrides?: CallOverrides): Promise<[string]>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMasterChef(
      _masterChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPID(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokens(overrides?: CallOverrides): Promise<[string[]]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    veAxial(overrides?: CallOverrides): Promise<[string]>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Axial(overrides?: CallOverrides): Promise<string>;

  DISTRIBUTION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

  MCAV2(overrides?: CallOverrides): Promise<string>;

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDeployer(
    _deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addGauge(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  axialDummyToken(overrides?: CallOverrides): Promise<string>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  depositDummyToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateGauge(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecated(arg0: string, overrides?: CallOverrides): Promise<string>;

  distribute(
    _start: BigNumberish,
    _end: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gauges(arg0: string, overrides?: CallOverrides): Promise<string>;

  getGauge(_token: string, overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  migrateGauge(
    _gauge: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  poke(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preDistribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDeployer(
    _deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewGauge(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reset(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sAxial(overrides?: CallOverrides): Promise<string>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMasterChef(
    _masterChef: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPID(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenVote(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokens(overrides?: CallOverrides): Promise<string[]>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  veAxial(overrides?: CallOverrides): Promise<string>;

  vote(
    _tokenVote: string[],
    _weights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Axial(overrides?: CallOverrides): Promise<string>;

    DISTRIBUTION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    MCAV2(overrides?: CallOverrides): Promise<string>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    addDeployer(_deployer: string, overrides?: CallOverrides): Promise<void>;

    addGauge(_token: string, overrides?: CallOverrides): Promise<void>;

    axialDummyToken(overrides?: CallOverrides): Promise<string>;

    collect(overrides?: CallOverrides): Promise<void>;

    deployers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    depositDummyToken(overrides?: CallOverrides): Promise<void>;

    deprecateGauge(_token: string, overrides?: CallOverrides): Promise<void>;

    deprecated(arg0: string, overrides?: CallOverrides): Promise<string>;

    distribute(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<string>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    migrateGauge(
      _gauge: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    poke(_owner: string, overrides?: CallOverrides): Promise<void>;

    preDistribute(overrides?: CallOverrides): Promise<void>;

    removeDeployer(_deployer: string, overrides?: CallOverrides): Promise<void>;

    renewGauge(_token: string, overrides?: CallOverrides): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    sAxial(overrides?: CallOverrides): Promise<string>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterChef(
      _masterChef: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPID(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tokenVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokens(overrides?: CallOverrides): Promise<string[]>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    veAxial(overrides?: CallOverrides): Promise<string>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    votes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    Axial(overrides?: CallOverrides): Promise<BigNumber>;

    DISTRIBUTION_DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    MCAV2(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDeployer(
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    axialDummyToken(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositDummyToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gauges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getGauge(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    migrateGauge(
      _gauge: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preDistribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDeployer(
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sAxial(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMasterChef(
      _masterChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPID(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    usedWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    veAxial(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Axial(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DISTRIBUTION_DEADLINE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MCAV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDeployer(
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    axialDummyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositDummyToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribute(
      _start: BigNumberish,
      _end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gauges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGauge(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateGauge(
      _gauge: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preDistribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDeployer(
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewGauge(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reset(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sAxial(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMasterChef(
      _masterChef: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPID(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenVote(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veAxial(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _tokenVote: string[],
      _weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

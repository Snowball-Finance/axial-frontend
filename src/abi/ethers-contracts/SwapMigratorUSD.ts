/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace SwapMigrator {
  export type MigrationDataStruct = {
    oldPoolAddress: string;
    oldPoolLPTokenAddress: string;
    newPoolAddress: string;
    newPoolLPTokenAddress: string;
    underlyingTokens: string[];
  };

  export type MigrationDataStructOutput = [
    string,
    string,
    string,
    string,
    string[]
  ] & {
    oldPoolAddress: string;
    oldPoolLPTokenAddress: string;
    newPoolAddress: string;
    newPoolLPTokenAddress: string;
    underlyingTokens: string[];
  };
}

export interface SwapMigratorUSDInterface extends utils.Interface {
  contractName: "SwapMigratorUSD";
  functions: {
    "migrateUSDPool(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "rescue(address,address)": FunctionFragment;
    "usdPoolMigrationData()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "migrateUSDPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rescue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "usdPoolMigrationData",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "migrateUSDPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdPoolMigrationData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SwapMigratorUSD extends BaseContract {
  contractName: "SwapMigratorUSD";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapMigratorUSDInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    migrateUSDPool(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rescue(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdPoolMigrationData(overrides?: CallOverrides): Promise<
      [string, string, string, string] & {
        oldPoolAddress: string;
        oldPoolLPTokenAddress: string;
        newPoolAddress: string;
        newPoolLPTokenAddress: string;
      }
    >;
  };

  migrateUSDPool(
    amount: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rescue(
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdPoolMigrationData(overrides?: CallOverrides): Promise<
    [string, string, string, string] & {
      oldPoolAddress: string;
      oldPoolLPTokenAddress: string;
      newPoolAddress: string;
      newPoolLPTokenAddress: string;
    }
  >;

  callStatic: {
    migrateUSDPool(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    rescue(token: string, to: string, overrides?: CallOverrides): Promise<void>;

    usdPoolMigrationData(overrides?: CallOverrides): Promise<
      [string, string, string, string] & {
        oldPoolAddress: string;
        oldPoolLPTokenAddress: string;
        newPoolAddress: string;
        newPoolLPTokenAddress: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    migrateUSDPool(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rescue(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdPoolMigrationData(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    migrateUSDPool(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rescue(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdPoolMigrationData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GaugeInterface extends utils.Interface {
  contractName: "Gauge";
  functions: {
    "PRIMARY_REWARD_DURATION()": FunctionFragment;
    "VEAXIAL()": FunctionFragment;
    "acceptGovernance()": FunctionFragment;
    "addRewardToken(address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "boostFactor(address)": FunctionFragment;
    "boostFactors(address)": FunctionFragment;
    "changeDistribution(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAll()": FunctionFragment;
    "depositFor(uint256,address)": FunctionFragment;
    "earned(address,address)": FunctionFragment;
    "exit()": FunctionFragment;
    "gaugeProxy()": FunctionFragment;
    "getAllRewards()": FunctionFragment;
    "getNumRewardTokens()": FunctionFragment;
    "getReward(uint256)": FunctionFragment;
    "getRewardForDuration()": FunctionFragment;
    "getRewards(uint256[])": FunctionFragment;
    "governance()": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "lastUpdateTime(address)": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "partnerDepositRewardTokens(address,uint256,uint256)": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "periodFinish(address)": FunctionFragment;
    "poolToken()": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardPerTokenStored(address)": FunctionFragment;
    "rewardRates(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "tokenPartners(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "updateTotalBoostFactor(address)": FunctionFragment;
    "userRewardPerTokenPaid(address,address)": FunctionFragment;
    "userShare(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PRIMARY_REWARD_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VEAXIAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "boostFactor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "boostFactors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDistribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gaugeProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "partnerDepositRewardTokens",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewardRates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPartners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalBoostFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "userShare", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PRIMARY_REWARD_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VEAXIAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gaugeProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerDepositRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPartners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalBoostFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "RewardAdded(uint256,address)": EventFragment;
    "RewardPaid(address,uint256,address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type RewardAddedEvent = TypedEvent<
  [BigNumber, string],
  { reward: BigNumber; token: string }
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export type RewardPaidEvent = TypedEvent<
  [string, BigNumber, string],
  { user: string; reward: BigNumber; token: string }
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Gauge extends BaseContract {
  contractName: "Gauge";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaugeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRIMARY_REWARD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    VEAXIAL(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewardToken(
      tokenAddress: string,
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    boostFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    boostFactors(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeDistribution(
      _distribution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gaugeProxy(overrides?: CallOverrides): Promise<[string]>;

    getAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNumRewardTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(
      tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewards(
      tokenIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    lastTimeRewardApplicable(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUpdateTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    partnerDepositRewardTokens(
      tokenAddress: string,
      amount: BigNumberish,
      rewardPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    periodFinish(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    rewardPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPerTokenStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardRates(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPartners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTotalBoostFactor(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userShare(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRIMARY_REWARD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  VEAXIAL(overrides?: CallOverrides): Promise<string>;

  acceptGovernance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewardToken(
    tokenAddress: string,
    partnerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  boostFactor(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  boostFactors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeDistribution(
    _distribution: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    amount: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gaugeProxy(overrides?: CallOverrides): Promise<string>;

  getAllRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNumRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(
    tokenIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getRewards(
    tokenIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  lastTimeRewardApplicable(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastUpdateTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  partnerDepositRewardTokens(
    tokenAddress: string,
    amount: BigNumberish,
    rewardPerSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  periodFinish(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolToken(overrides?: CallOverrides): Promise<string>;

  rewardPerToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPartners(arg0: string, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  updateTotalBoostFactor(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userShare(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRIMARY_REWARD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    VEAXIAL(overrides?: CallOverrides): Promise<string>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    addRewardToken(
      tokenAddress: string,
      partnerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    boostFactor(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    boostFactors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeDistribution(
      _distribution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositAll(overrides?: CallOverrides): Promise<void>;

    depositFor(
      amount: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    gaugeProxy(overrides?: CallOverrides): Promise<string>;

    getAllRewards(overrides?: CallOverrides): Promise<void>;

    getNumRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      tokenIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    lastTimeRewardApplicable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    partnerDepositRewardTokens(
      tokenAddress: string,
      amount: BigNumberish,
      rewardPerSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    periodFinish(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<string>;

    rewardPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerTokenStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPartners(arg0: string, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateTotalBoostFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userShare(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RewardAdded(uint256,address)"(
      reward?: null,
      token?: null
    ): RewardAddedEventFilter;
    RewardAdded(reward?: null, token?: null): RewardAddedEventFilter;

    "RewardPaid(address,uint256,address)"(
      user?: string | null,
      reward?: null,
      token?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: string | null,
      reward?: null,
      token?: null
    ): RewardPaidEventFilter;

    "Staked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): StakedEventFilter;
    Staked(user?: string | null, amount?: null): StakedEventFilter;

    "Withdrawn(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(user?: string | null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    PRIMARY_REWARD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    VEAXIAL(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewardToken(
      tokenAddress: string,
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    boostFactor(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    boostFactors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeDistribution(
      _distribution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gaugeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    getAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNumRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getRewards(
      tokenIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    partnerDepositRewardTokens(
      tokenAddress: string,
      amount: BigNumberish,
      rewardPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerTokenStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPartners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    updateTotalBoostFactor(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userShare(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRIMARY_REWARD_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VEAXIAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewardToken(
      tokenAddress: string,
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostFactor(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boostFactors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeDistribution(
      _distribution: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gaugeProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNumRewardTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      tokenIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      tokenIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    partnerDepositRewardTokens(
      tokenAddress: string,
      amount: BigNumberish,
      rewardPerSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPartners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTotalBoostFactor(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userShare(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace AxialAggregator {
  export type FindBestPathParamsStruct = {
    amountIn: BigNumberish;
    tokenIn: string;
    tokenOut: string;
    maxSteps: BigNumberish;
    gasPrice: BigNumberish;
  };

  export type FindBestPathParamsStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    amountIn: BigNumber;
    tokenIn: string;
    tokenOut: string;
    maxSteps: BigNumber;
    gasPrice: BigNumber;
  };
}

export declare namespace IRouter {
  export type FormattedOfferWithGasStruct = {
    amounts: BigNumberish[];
    adapters: string[];
    path: string[];
    gasEstimate: BigNumberish;
  };

  export type FormattedOfferWithGasStructOutput = [
    BigNumber[],
    string[],
    string[],
    BigNumber
  ] & {
    amounts: BigNumber[];
    adapters: string[];
    path: string[];
    gasEstimate: BigNumber;
  };

  export type TradeStruct = {
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    path: string[];
    adapters: string[];
  };

  export type TradeStructOutput = [BigNumber, BigNumber, string[], string[]] & {
    amountIn: BigNumber;
    amountOut: BigNumber;
    path: string[];
    adapters: string[];
  };
}

export interface AxialAggregatorInterface extends utils.Interface {
  contractName: "AxialAggregator";
  functions: {
    "ExternalRouter()": FunctionFragment;
    "InternalRouter()": FunctionFragment;
    "WAVAX()": FunctionFragment;
    "findBestPath((uint256,address,address,uint256,uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExternalRouter(address)": FunctionFragment;
    "setInternalRouter(address)": FunctionFragment;
    "swap((uint256,uint256,address[],address[]),address,uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ExternalRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "InternalRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WAVAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "findBestPath",
    values: [AxialAggregator.FindBestPathParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInternalRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [IRouter.TradeStruct, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ExternalRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "InternalRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WAVAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findBestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInternalRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedExternalRouter(address,address)": EventFragment;
    "UpdatedInternalRouter(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedExternalRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedInternalRouter"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpdatedExternalRouterEvent = TypedEvent<
  [string, string],
  { _oldExternalRouter: string; _newExternalRouter: string }
>;

export type UpdatedExternalRouterEventFilter =
  TypedEventFilter<UpdatedExternalRouterEvent>;

export type UpdatedInternalRouterEvent = TypedEvent<
  [string, string],
  { _oldInternalRouter: string; _newInternalRouter: string }
>;

export type UpdatedInternalRouterEventFilter =
  TypedEventFilter<UpdatedInternalRouterEvent>;

export interface AxialAggregator extends BaseContract {
  contractName: "AxialAggregator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AxialAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ExternalRouter(overrides?: CallOverrides): Promise<[string]>;

    InternalRouter(overrides?: CallOverrides): Promise<[string]>;

    WAVAX(overrides?: CallOverrides): Promise<[string]>;

    findBestPath(
      _params: AxialAggregator.FindBestPathParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [IRouter.FormattedOfferWithGasStructOutput, boolean] & {
        bestPath: IRouter.FormattedOfferWithGasStructOutput;
        useInternalRouter: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalRouter(
      _externalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInternalRouter(
      _internalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _trade: IRouter.TradeStruct,
      _to: string,
      _fee: BigNumberish,
      _useInternalRouter: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ExternalRouter(overrides?: CallOverrides): Promise<string>;

  InternalRouter(overrides?: CallOverrides): Promise<string>;

  WAVAX(overrides?: CallOverrides): Promise<string>;

  findBestPath(
    _params: AxialAggregator.FindBestPathParamsStruct,
    overrides?: CallOverrides
  ): Promise<
    [IRouter.FormattedOfferWithGasStructOutput, boolean] & {
      bestPath: IRouter.FormattedOfferWithGasStructOutput;
      useInternalRouter: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalRouter(
    _externalRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInternalRouter(
    _internalRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _trade: IRouter.TradeStruct,
    _to: string,
    _fee: BigNumberish,
    _useInternalRouter: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ExternalRouter(overrides?: CallOverrides): Promise<string>;

    InternalRouter(overrides?: CallOverrides): Promise<string>;

    WAVAX(overrides?: CallOverrides): Promise<string>;

    findBestPath(
      _params: AxialAggregator.FindBestPathParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [IRouter.FormattedOfferWithGasStructOutput, boolean] & {
        bestPath: IRouter.FormattedOfferWithGasStructOutput;
        useInternalRouter: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExternalRouter(
      _externalRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInternalRouter(
      _internalRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      _trade: IRouter.TradeStruct,
      _to: string,
      _fee: BigNumberish,
      _useInternalRouter: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdatedExternalRouter(address,address)"(
      _oldExternalRouter?: null,
      _newExternalRouter?: null
    ): UpdatedExternalRouterEventFilter;
    UpdatedExternalRouter(
      _oldExternalRouter?: null,
      _newExternalRouter?: null
    ): UpdatedExternalRouterEventFilter;

    "UpdatedInternalRouter(address,address)"(
      _oldInternalRouter?: null,
      _newInternalRouter?: null
    ): UpdatedInternalRouterEventFilter;
    UpdatedInternalRouter(
      _oldInternalRouter?: null,
      _newInternalRouter?: null
    ): UpdatedInternalRouterEventFilter;
  };

  estimateGas: {
    ExternalRouter(overrides?: CallOverrides): Promise<BigNumber>;

    InternalRouter(overrides?: CallOverrides): Promise<BigNumber>;

    WAVAX(overrides?: CallOverrides): Promise<BigNumber>;

    findBestPath(
      _params: AxialAggregator.FindBestPathParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalRouter(
      _externalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInternalRouter(
      _internalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _trade: IRouter.TradeStruct,
      _to: string,
      _fee: BigNumberish,
      _useInternalRouter: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ExternalRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    InternalRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAVAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findBestPath(
      _params: AxialAggregator.FindBestPathParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalRouter(
      _externalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInternalRouter(
      _internalRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _trade: IRouter.TradeStruct,
      _to: string,
      _fee: BigNumberish,
      _useInternalRouter: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

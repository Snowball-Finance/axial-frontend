/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SynthetixExchangeRateInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addAggregator(bytes32,address)": FunctionFragment;
    "aggregatorKeys(uint256)": FunctionFragment;
    "aggregatorWarningFlags()": FunctionFragment;
    "aggregators(bytes32)": FunctionFragment;
    "anyRateIsInvalid(bytes32[])": FunctionFragment;
    "canFreezeRate(bytes32)": FunctionFragment;
    "currenciesUsingAggregator(address)": FunctionFragment;
    "currencyKeyDecimals(bytes32)": FunctionFragment;
    "currentRoundForRate(bytes32)": FunctionFragment;
    "deleteRate(bytes32)": FunctionFragment;
    "effectiveValue(bytes32,uint256,bytes32)": FunctionFragment;
    "effectiveValueAndRates(bytes32,uint256,bytes32)": FunctionFragment;
    "effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)": FunctionFragment;
    "freezeRate(bytes32)": FunctionFragment;
    "getCurrentRoundId(bytes32)": FunctionFragment;
    "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "inversePricing(bytes32)": FunctionFragment;
    "invertedKeys(uint256)": FunctionFragment;
    "isResolverCached()": FunctionFragment;
    "lastRateUpdateTimes(bytes32)": FunctionFragment;
    "lastRateUpdateTimesForCurrencies(bytes32[])": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "rateAndInvalid(bytes32)": FunctionFragment;
    "rateAndTimestampAtRound(bytes32,uint256)": FunctionFragment;
    "rateAndUpdatedTime(bytes32)": FunctionFragment;
    "rateForCurrency(bytes32)": FunctionFragment;
    "rateIsFlagged(bytes32)": FunctionFragment;
    "rateIsFrozen(bytes32)": FunctionFragment;
    "rateIsInvalid(bytes32)": FunctionFragment;
    "rateIsStale(bytes32)": FunctionFragment;
    "rateStalePeriod()": FunctionFragment;
    "ratesAndInvalidForCurrencies(bytes32[])": FunctionFragment;
    "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)": FunctionFragment;
    "ratesForCurrencies(bytes32[])": FunctionFragment;
    "rebuildCache()": FunctionFragment;
    "removeAggregator(bytes32)": FunctionFragment;
    "removeInversePricing(bytes32)": FunctionFragment;
    "resolver()": FunctionFragment;
    "resolverAddressesRequired()": FunctionFragment;
    "roundFrozen(bytes32)": FunctionFragment;
    "setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "updateRates(bytes32[],uint256[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAggregator",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorWarningFlags",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "anyRateIsInvalid",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canFreezeRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currenciesUsingAggregator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyKeyDecimals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundForRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveValue",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveValueAndRates",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveValueAtRound",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoundIdBeforeElapsedSecs",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inversePricing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invertedKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isResolverCached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRateUpdateTimes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRateUpdateTimesForCurrencies",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateAndInvalid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateAndTimestampAtRound",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateAndUpdatedTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateForCurrency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsFlagged",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsFrozen",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsInvalid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsStale",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateStalePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ratesAndInvalidForCurrencies",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ratesAndUpdatedTimeForCurrencyLastNRounds",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ratesForCurrencies",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rebuildCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAggregator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInversePricing",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolverAddressesRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundFrozen",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInversePricing",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values: [BytesLike[], BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorWarningFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyRateIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFreezeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currenciesUsingAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyKeyDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundForRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "effectiveValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveValueAndRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveValueAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freezeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoundIdBeforeElapsedSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inversePricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invertedKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResolverCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRateUpdateTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRateUpdateTimesForCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateAndInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateAndTimestampAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateAndUpdatedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateForCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsStale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateStalePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratesAndInvalidForCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratesAndUpdatedTimeForCurrencyLastNRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratesForCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebuildCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeInversePricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolverAddressesRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInversePricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;

  events: {
    "AggregatorAdded(bytes32,address)": EventFragment;
    "AggregatorRemoved(bytes32,address)": EventFragment;
    "CacheUpdated(bytes32,address)": EventFragment;
    "InversePriceConfigured(bytes32,uint256,uint256,uint256)": EventFragment;
    "InversePriceFrozen(bytes32,uint256,uint256,address)": EventFragment;
    "OracleUpdated(address)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "RateDeleted(bytes32)": EventFragment;
    "RatesUpdated(bytes32[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CacheUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InversePriceConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InversePriceFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatesUpdated"): EventFragment;
}

export class SynthetixExchangeRate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SynthetixExchangeRateInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAggregator(bytes32,address)"(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "aggregatorKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    aggregatorWarningFlags(overrides?: CallOverrides): Promise<[string]>;

    "aggregatorWarningFlags()"(overrides?: CallOverrides): Promise<[string]>;

    aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "aggregators(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "anyRateIsInvalid(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canFreezeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canFreezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { currencies: string[] }>;

    "currenciesUsingAggregator(address)"(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { currencies: string[] }>;

    currencyKeyDecimals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "currencyKeyDecimals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentRoundForRate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deleteRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deleteRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "effectiveValue(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    "effectiveValueAndRates(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    freezeRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCurrentRoundId(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)"(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        entryPoint: BigNumber;
        upperLimit: BigNumber;
        lowerLimit: BigNumber;
        frozenAtUpperLimit: boolean;
        frozenAtLowerLimit: boolean;
      }
    >;

    "inversePricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        entryPoint: BigNumber;
        upperLimit: BigNumber;
        lowerLimit: BigNumber;
        frozenAtUpperLimit: boolean;
        frozenAtLowerLimit: boolean;
      }
    >;

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "invertedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    "isResolverCached()"(overrides?: CallOverrides): Promise<[boolean]>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastRateUpdateTimes(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "lastRateUpdateTimesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

    "rateAndInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    "rateAndTimestampAtRound(bytes32,uint256)"(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    "rateAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rateForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "rateIsFlagged(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "rateIsFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "rateIsInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "rateIsStale(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateStalePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rateStalePeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
    >;

    "ratesAndInvalidForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
    >;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >;

    "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)"(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "ratesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    rebuildCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebuildCache()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAggregator(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeInversePricing(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    "resolver()"(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    "resolverAddressesRequired()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    roundFrozen(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "roundFrozen(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)"(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateRates(bytes32[],uint256[],uint256)"(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAggregator(
    currencyKey: BytesLike,
    aggregatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAggregator(bytes32,address)"(
    currencyKey: BytesLike,
    aggregatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aggregatorKeys(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "aggregatorKeys(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  aggregatorWarningFlags(overrides?: CallOverrides): Promise<string>;

  "aggregatorWarningFlags()"(overrides?: CallOverrides): Promise<string>;

  aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "aggregators(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  anyRateIsInvalid(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "anyRateIsInvalid(bytes32[])"(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  canFreezeRate(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canFreezeRate(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currenciesUsingAggregator(
    aggregator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "currenciesUsingAggregator(address)"(
    aggregator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  currencyKeyDecimals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "currencyKeyDecimals(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  currentRoundForRate(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentRoundForRate(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deleteRate(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deleteRate(bytes32)"(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  effectiveValue(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "effectiveValue(bytes32,uint256,bytes32)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  effectiveValueAndRates(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      sourceRate: BigNumber;
      destinationRate: BigNumber;
    }
  >;

  "effectiveValueAndRates(bytes32,uint256,bytes32)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      sourceRate: BigNumber;
      destinationRate: BigNumber;
    }
  >;

  effectiveValueAtRound(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    roundIdForSrc: BigNumberish,
    roundIdForDest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    roundIdForSrc: BigNumberish,
    roundIdForDest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  freezeRate(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freezeRate(bytes32)"(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentRoundId(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCurrentRoundId(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastRoundIdBeforeElapsedSecs(
    currencyKey: BytesLike,
    startingRoundId: BigNumberish,
    startingTimestamp: BigNumberish,
    timediff: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)"(
    currencyKey: BytesLike,
    startingRoundId: BigNumberish,
    startingTimestamp: BigNumberish,
    timediff: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inversePricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      entryPoint: BigNumber;
      upperLimit: BigNumber;
      lowerLimit: BigNumber;
      frozenAtUpperLimit: boolean;
      frozenAtLowerLimit: boolean;
    }
  >;

  "inversePricing(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      entryPoint: BigNumber;
      upperLimit: BigNumber;
      lowerLimit: BigNumber;
      frozenAtUpperLimit: boolean;
      frozenAtLowerLimit: boolean;
    }
  >;

  invertedKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "invertedKeys(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  "isResolverCached()"(overrides?: CallOverrides): Promise<boolean>;

  lastRateUpdateTimes(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastRateUpdateTimes(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRateUpdateTimesForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "lastRateUpdateTimesForCurrencies(bytes32[])"(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rateAndInvalid(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

  "rateAndInvalid(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

  rateAndTimestampAtRound(
    currencyKey: BytesLike,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

  "rateAndTimestampAtRound(bytes32,uint256)"(
    currencyKey: BytesLike,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

  rateAndUpdatedTime(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

  "rateAndUpdatedTime(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

  rateForCurrency(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rateForCurrency(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateIsFlagged(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "rateIsFlagged(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateIsFrozen(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "rateIsFrozen(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateIsInvalid(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "rateIsInvalid(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateIsStale(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "rateIsStale(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "rateStalePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  ratesAndInvalidForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
  >;

  "ratesAndInvalidForCurrencies(bytes32[])"(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
  >;

  ratesAndUpdatedTimeForCurrencyLastNRounds(
    currencyKey: BytesLike,
    numRounds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
  >;

  "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)"(
    currencyKey: BytesLike,
    numRounds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
  >;

  ratesForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "ratesForCurrencies(bytes32[])"(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  rebuildCache(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebuildCache()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAggregator(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAggregator(bytes32)"(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeInversePricing(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeInversePricing(bytes32)"(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  "resolver()"(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  "resolverAddressesRequired()"(overrides?: CallOverrides): Promise<string[]>;

  roundFrozen(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "roundFrozen(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setInversePricing(
    currencyKey: BytesLike,
    entryPoint: BigNumberish,
    upperLimit: BigNumberish,
    lowerLimit: BigNumberish,
    freezeAtUpperLimit: boolean,
    freezeAtLowerLimit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)"(
    currencyKey: BytesLike,
    entryPoint: BigNumberish,
    upperLimit: BigNumberish,
    lowerLimit: BigNumberish,
    freezeAtUpperLimit: boolean,
    freezeAtLowerLimit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRates(
    currencyKeys: BytesLike[],
    newRates: BigNumberish[],
    timeSent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateRates(bytes32[],uint256[],uint256)"(
    currencyKeys: BytesLike[],
    newRates: BigNumberish[],
    timeSent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAggregator(bytes32,address)"(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "aggregatorKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    aggregatorWarningFlags(overrides?: CallOverrides): Promise<string>;

    "aggregatorWarningFlags()"(overrides?: CallOverrides): Promise<string>;

    aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "aggregators(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "anyRateIsInvalid(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    canFreezeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canFreezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "currenciesUsingAggregator(address)"(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    currencyKeyDecimals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "currencyKeyDecimals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentRoundForRate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveValue(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    "effectiveValueAndRates(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "freezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentRoundId(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)"(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        entryPoint: BigNumber;
        upperLimit: BigNumber;
        lowerLimit: BigNumber;
        frozenAtUpperLimit: boolean;
        frozenAtLowerLimit: boolean;
      }
    >;

    "inversePricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        entryPoint: BigNumber;
        upperLimit: BigNumber;
        lowerLimit: BigNumber;
        frozenAtUpperLimit: boolean;
        frozenAtLowerLimit: boolean;
      }
    >;

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "invertedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    "isResolverCached()"(overrides?: CallOverrides): Promise<boolean>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastRateUpdateTimes(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "lastRateUpdateTimesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

    "rateAndInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    "rateAndTimestampAtRound(bytes32,uint256)"(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    "rateAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rateIsFlagged(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rateIsFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rateIsInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rateIsStale(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "rateStalePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
    >;

    "ratesAndInvalidForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
    >;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >;

    "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)"(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "ratesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    "rebuildCache()"(overrides?: CallOverrides): Promise<void>;

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAggregator(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeInversePricing(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    "resolver()"(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    "resolverAddressesRequired()"(overrides?: CallOverrides): Promise<string[]>;

    roundFrozen(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "roundFrozen(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)"(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateRates(bytes32[],uint256[],uint256)"(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AggregatorAdded(
      currencyKey: null,
      aggregator: null
    ): TypedEventFilter<
      [string, string],
      { currencyKey: string; aggregator: string }
    >;

    AggregatorRemoved(
      currencyKey: null,
      aggregator: null
    ): TypedEventFilter<
      [string, string],
      { currencyKey: string; aggregator: string }
    >;

    CacheUpdated(
      name: null,
      destination: null
    ): TypedEventFilter<
      [string, string],
      { name: string; destination: string }
    >;

    InversePriceConfigured(
      currencyKey: null,
      entryPoint: null,
      upperLimit: null,
      lowerLimit: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        currencyKey: string;
        entryPoint: BigNumber;
        upperLimit: BigNumber;
        lowerLimit: BigNumber;
      }
    >;

    InversePriceFrozen(
      currencyKey: null,
      rate: null,
      roundId: null,
      initiator: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        currencyKey: string;
        rate: BigNumber;
        roundId: BigNumber;
        initiator: string;
      }
    >;

    OracleUpdated(
      newOracle: null
    ): TypedEventFilter<[string], { newOracle: string }>;

    OwnerChanged(
      oldOwner: null,
      newOwner: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerNominated(
      newOwner: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    RateDeleted(
      currencyKey: null
    ): TypedEventFilter<[string], { currencyKey: string }>;

    RatesUpdated(
      currencyKeys: null,
      newRates: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { currencyKeys: string[]; newRates: BigNumber[] }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAggregator(bytes32,address)"(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aggregatorKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregatorWarningFlags(overrides?: CallOverrides): Promise<BigNumber>;

    "aggregatorWarningFlags()"(overrides?: CallOverrides): Promise<BigNumber>;

    aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "aggregators(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "anyRateIsInvalid(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canFreezeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canFreezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currenciesUsingAggregator(address)"(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyKeyDecimals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currencyKeyDecimals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentRoundForRate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deleteRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveValue(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveValueAndRates(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentRoundId(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)"(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "inversePricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invertedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    "isResolverCached()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastRateUpdateTimes(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastRateUpdateTimesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateAndInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateAndTimestampAtRound(bytes32,uint256)"(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateIsFlagged(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateIsFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateIsInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateIsStale(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "rateStalePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ratesAndInvalidForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)"(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ratesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebuildCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebuildCache()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAggregator(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeInversePricing(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    "resolver()"(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    "resolverAddressesRequired()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundFrozen(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "roundFrozen(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)"(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateRates(bytes32[],uint256[],uint256)"(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAggregator(bytes32,address)"(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aggregatorKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorWarningFlags(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aggregatorWarningFlags()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregators(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aggregators(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "anyRateIsInvalid(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canFreezeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canFreezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currenciesUsingAggregator(address)"(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currencyKeyDecimals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currencyKeyDecimals(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentRoundForRate(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deleteRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveValue(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveValueAndRates(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freezeRate(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentRoundId(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)"(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "inversePricing(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "invertedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isResolverCached()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRateUpdateTimes(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRateUpdateTimesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateAndInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateAndTimestampAtRound(bytes32,uint256)"(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateAndUpdatedTime(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateForCurrency(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateIsFlagged(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateIsFrozen(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateIsInvalid(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateIsStale(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateStalePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateStalePeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ratesAndInvalidForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)"(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ratesForCurrencies(bytes32[])"(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebuildCache()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAggregator(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeInversePricing(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "resolver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolverAddressesRequired()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundFrozen(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "roundFrozen(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)"(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freezeAtUpperLimit: boolean,
      freezeAtLowerLimit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateRates(bytes32[],uint256[],uint256)"(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

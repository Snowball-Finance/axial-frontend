import ERC20_ABI from "abi/erc20.json";
import { Token, TokenSymbols } from "./containers/Swap/types";
import axialLogo from "assets/icons/logo_icon.svg"; // this needs a smaller icon logo(24)
import daiLogo from "assets/icons/dai.svg";
import fraxLogo from "assets/icons/frax.svg";
import tsdLogo from "assets/icons/tsd.svg";
import mimLogo from "assets/icons/mim.svg";
import tusdLogo from "assets/icons/tusd.svg";
import usdcLogo from "assets/icons/usdc.svg";
import usdtLogo from "assets/icons/usdt.svg";
import avaiLogo from "assets/icons/avai.svg";
import { networkName, tokenAddress } from "utils/tokenAddresses";
import { fujiTokens } from "./fujiTokens";

//symbol should be identical to key of token
export const tokens =
  networkName === "Fuji"
    ? fujiTokens
    : ({
        [TokenSymbols.USDTe]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDTe),
          symbol: TokenSymbols.USDTe,
          name: "Tether",
          geckoId: "tether",
          logo: usdtLogo,
          decimals: 6,
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.usdcAM3DUSD]: {
          address: tokenAddress(TokenSymbols.usdcAM3DUSD),
          ABI: ERC20_ABI,
          decimals: 18,
          symbol: TokenSymbols.usdcAM3DUSD,
          name: "Axial USDC/AM3D",
          logo: axialLogo,
          geckoId: "usdcam3dusd",
          masterchefId: 5,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.ac4dUSD]: {
          address: tokenAddress(TokenSymbols.ac4dUSD),
          ABI: ERC20_ABI,
          decimals: 18,
          symbol: TokenSymbols.ac4dUSD,
          name: "AC4D TSD/MIM/FRAX/DAI.e",
          logo: axialLogo,
          geckoId: "ac4dusd",
          masterchefId: 1,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.aa3dUSD]: {
          address: tokenAddress(TokenSymbols.aa3dUSD),
          ABI: ERC20_ABI,
          decimals: 18,
          symbol: "aa3dUSD",
          name: "AA3D AVAI/MIM/USDC.e",
          logo: axialLogo,
          geckoId: "aa3dusd",
          masterchefId: 4,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.am3dUSD]: {
          address: tokenAddress(TokenSymbols.am3dUSD),
          ABI: ERC20_ABI,
          decimals: 18,
          symbol: TokenSymbols.am3dUSD,
          name: "AM3D MIM/USDC.e/DAI.e",
          logo: axialLogo,
          geckoId: "am3dusd",
          masterchefId: 3,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.as4dUSD]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.as4dUSD),
          decimals: 18,
          symbol: TokenSymbols.as4dUSD,
          name: "AS4D DAI.e/USDC.e/USDT.e/TUSD",
          geckoId: "as4dusd",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: true,
          logo: axialLogo,
        },
        [TokenSymbols.JLP]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.JLP),
          decimals: 18,
          symbol: TokenSymbols.JLP,
          name: "JLP",
          geckoId: "jlpavaxaxial",
          logo: axialLogo,
          masterchefId: 2,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.FRAX]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.FRAX),
          decimals: 18,
          symbol: TokenSymbols.FRAX,
          name: "Frax",
          logo: fraxLogo,
          geckoId: "frax",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.FXS]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.FXS),
          decimals: 18,
          symbol: TokenSymbols.FXS,
          name: "Frax Share",
          logo: axialLogo,
          geckoId: "frax-share",
          isLPToken: false,
          isSynthetic: false,
          masterchefId: 0,
        },
        [TokenSymbols.DAI]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.DAI),
          decimals: 18,
          symbol: TokenSymbols.DAI,
          logo: daiLogo,
          geckoId: "dai",
          name: "Dai",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.AVAI]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.AVAI),
          decimals: 18,
          symbol: TokenSymbols.AVAI,
          logo: avaiLogo,
          geckoId: "orca-avai",
          name: "Orca AVAI",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.TSD]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.TSD),
          decimals: 18,
          symbol: TokenSymbols.TSD,
          name: "Teddy Dollar",
          logo: tsdLogo,
          geckoId: "teddy-dollar",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.USDC]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDC),
          decimals: 6,
          symbol: TokenSymbols.USDC,
          name: "Native USDC",
          logo: usdcLogo,
          geckoId: "usd-coin",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.MIM]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.MIM),
          decimals: 18,
          symbol: TokenSymbols.MIM,
          name: "Magic Internet Money",
          logo: mimLogo,
          geckoId: "magic-internet-money",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.TEDDY]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.TEDDY),
          decimals: 18,
          symbol: TokenSymbols.TEDDY,
          name: "Teddy",
          logo: axialLogo,
          geckoId: "teddy",
          isLPToken: false,
          isSynthetic: false,
          masterchefId: 0,
        },
        [TokenSymbols.WAVAX]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.WAVAX),
          decimals: 18,
          symbol: TokenSymbols.WAVAX,
          name: "Wrapped AVAX",
          logo: axialLogo,
          geckoId: "avalanche-2",
          isLPToken: false,
          isSynthetic: false,
          masterchefId: 0,
        },
        [TokenSymbols.TUSD]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.TUSD),
          decimals: 18,
          symbol: TokenSymbols.TUSD,
          name: "TUSD",
          logo: tusdLogo,
          geckoId: "true-usd",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.USDCe]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDCe),
          decimals: 6,
          symbol: TokenSymbols.USDCe,
          name: "USDC.e",
          logo: usdcLogo,
          geckoId: "usd-coin",
          isLPToken: false,
          isSynthetic: false,
          masterchefId: 0,
        },
        [TokenSymbols.ORCA]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.ORCA),
          decimals: 18,
          symbol: TokenSymbols.ORCA,
          name: "Orca DAO",
          logo: axialLogo,
          geckoId: "orcadao",
          masterchefId: 0,
          isSynthetic: false,
          isLPToken: false,
        },
      } as { [K in TokenSymbols]: Token });
export const extraRewardTokens = [
  tokens.TEDDY,
  tokens.FXS,
  tokens.WAVAX,
  tokens.ORCA,
];

import ERC20_ABI from "abi/erc20.json";
import { Token, TokenSymbols } from "./containers/Swap/types";
import axialLogo from "assets/icons/logo_icon.svg"; // this needs a smaller icon logo(24)
import { networkName, tokenAddress } from "utils/tokenAddresses";
import { fujiTokens } from "./fujiTokens";
import { iconSrcWithAddress } from "utils/iconSrcByAddress";

//symbol should be identical to key of token
export const tokens =
  networkName === "Fuji"
    ? fujiTokens
    : ({
        [TokenSymbols.DAI]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.DAI),
          decimals: 18,
          symbol: TokenSymbols.DAI,
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.DAI)),
          geckoId: "dai",
          name: "Dai Stablecoin",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.USDTe]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDTe),
          symbol: TokenSymbols.USDTe,
          name: "Tether USD",
          geckoId: "tether",
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.USDTe)),
          decimals: 6,
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.USDt]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDt),
          symbol: TokenSymbols.USDt,
          name: "TetherToken",
          geckoId: "tether",
          logo:'https://assets.coingecko.com/coins/images/325/small/Tether-logo.png?1598003707', //iconSrcWithAddress(tokenAddress(TokenSymbols.USDt)),
          decimals: 6,
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.USDCe]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDCe),
          decimals: 6,
          symbol: TokenSymbols.USDCe,
          name: "Bridged USD Coin",
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.USDCe)),
          geckoId: "usd-coin",
          isLPToken: false,
          isSynthetic: false,
          masterchefId: -1,
        },
        [TokenSymbols.USDC]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.USDC),
          decimals: 6,
          symbol: TokenSymbols.USDC,
          name: "USD Coin",
          logo:'https://assets.coingecko.com/coins/images/6319/small/USD_Coin_icon.png?1547042389',// iconSrcWithAddress(tokenAddress(TokenSymbols.USDC)),
          geckoId: "usd-coin",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.MIM]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.MIM),
          decimals: 18,
          symbol: TokenSymbols.MIM,
          name: "Magic Internet Money",
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.MIM)),
          geckoId: "magic-internet-money",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.YUSD]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.YUSD),
          decimals: 18,
          symbol: TokenSymbols.YUSD,
          name: "YUSD Stablecoin",
          logo:'https://assets.coingecko.com/coins/images/25024/small/1_oJ0F2Zf6CuAhLP0zOboo6w.png?1649837252',// iconSrcWithAddress(tokenAddress(TokenSymbols.YUSD)),
          geckoId: "yusd-stablecoin",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.TUSD]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.TUSD),
          decimals: 18,
          symbol: TokenSymbols.TUSD,
          name: "TrueUSD",
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.TUSD)),
          geckoId: "true-usd",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.TSD]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.TSD),
          decimals: 18,
          symbol: TokenSymbols.TSD,
          name: "TSD Stablecoin",
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.TSD)),
          geckoId: "teddy-dollar",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.FRAX]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.FRAX),
          decimals: 18,
          symbol: TokenSymbols.FRAX,
          name: "Frax",
          logo: iconSrcWithAddress(tokenAddress(TokenSymbols.FRAX)),
          geckoId: "frax",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
        },
        [TokenSymbols.SCALES]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.SCALES),
          decimals: 18,
          symbol: TokenSymbols.SCALES,
          name: "Axial Dai.e+USDT.e+USDC.e+USDC",
          logo: axialLogo,
          geckoId: "pool4tokens",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.HERO]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.HERO),
          decimals: 18,
          symbol: TokenSymbols.HERO,
          name: "Axial USDC+USDT+MIM+YUSD",
          logo: axialLogo,
          geckoId: "pool4tokens",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.AS4D]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.AS4D),
          decimals: 18,
          symbol: TokenSymbols.AS4D,
          name: "Axial TUSD+USDC.e+DAI.e+USDT.e",
          logo: axialLogo,
          geckoId: "pool4tokens",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.AC4D]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.AC4D),
          decimals: 18,
          symbol: TokenSymbols.AC4D,
          name: "Axial DAI.e+MIM+TSD+FRAX",
          logo: axialLogo,
          geckoId: "pool4tokens",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.AM3D]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.AM3D),
          decimals: 18,
          symbol: TokenSymbols.AM3D,
          name: "Axial DAI.e+USDC.e+MIM",
          logo: axialLogo,
          geckoId: "pool3tokens",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: true,
        },
        [TokenSymbols.AXIAL]: {
          ABI: ERC20_ABI,
          address: tokenAddress(TokenSymbols.AXIAL),
          decimals: 18,
          symbol: TokenSymbols.AXIAL,
          name: "Axial Token",
          logo: axialLogo,
          geckoId: "axial-token",
          masterchefId: -1,
          isSynthetic: false,
          isLPToken: false,
          blockSwap: true,
        },
      } as { [K in TokenSymbols]: Token });

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SynthetixNetworkTokenInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT_NAME()": FunctionFragment;
    "DECIMALS()": FunctionFragment;
    "TOKEN_NAME()": FunctionFragment;
    "TOKEN_SYMBOL()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "anySynthOrSNXRateIsInvalid()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "availableCurrencyKeys()": FunctionFragment;
    "availableSynthCount()": FunctionFragment;
    "availableSynths(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnSecondary(address,uint256)": FunctionFragment;
    "burnSynths(uint256)": FunctionFragment;
    "burnSynthsOnBehalf(address,uint256)": FunctionFragment;
    "burnSynthsToTarget()": FunctionFragment;
    "burnSynthsToTargetOnBehalf(address)": FunctionFragment;
    "collateral(address)": FunctionFragment;
    "collateralisationRatio(address)": FunctionFragment;
    "debtBalanceOf(address,bytes32)": FunctionFragment;
    "decimals()": FunctionFragment;
    "emitExchangeRebate(address,bytes32,uint256)": FunctionFragment;
    "emitExchangeReclaim(address,bytes32,uint256)": FunctionFragment;
    "emitExchangeTracking(bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "emitSynthExchange(address,bytes32,uint256,bytes32,uint256,address)": FunctionFragment;
    "exchange(bytes32,uint256,bytes32)": FunctionFragment;
    "exchangeOnBehalf(address,bytes32,uint256,bytes32)": FunctionFragment;
    "exchangeOnBehalfWithTracking(address,bytes32,uint256,bytes32,address,bytes32)": FunctionFragment;
    "exchangeWithTracking(bytes32,uint256,bytes32,address,bytes32)": FunctionFragment;
    "exchangeWithTrackingForInitiator(bytes32,uint256,bytes32,address,bytes32)": FunctionFragment;
    "exchangeWithVirtual(bytes32,uint256,bytes32,bytes32)": FunctionFragment;
    "integrationProxy()": FunctionFragment;
    "isResolverCached()": FunctionFragment;
    "isWaitingPeriod(bytes32)": FunctionFragment;
    "issueMaxSynths()": FunctionFragment;
    "issueMaxSynthsOnBehalf(address)": FunctionFragment;
    "issueSynths(uint256)": FunctionFragment;
    "issueSynthsOnBehalf(address,uint256)": FunctionFragment;
    "liquidateDelinquentAccount(address,uint256)": FunctionFragment;
    "maxIssuableSynths(address)": FunctionFragment;
    "messageSender()": FunctionFragment;
    "migrateEscrowBalanceToRewardEscrowV2()": FunctionFragment;
    "mint()": FunctionFragment;
    "mintSecondary(address,uint256)": FunctionFragment;
    "mintSecondaryRewards(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxy()": FunctionFragment;
    "rebuildCache()": FunctionFragment;
    "remainingIssuableSynths(address)": FunctionFragment;
    "resolver()": FunctionFragment;
    "resolverAddressesRequired()": FunctionFragment;
    "sUSD()": FunctionFragment;
    "setIntegrationProxy(address)": FunctionFragment;
    "setMessageSender(address)": FunctionFragment;
    "setProxy(address)": FunctionFragment;
    "setTokenState(address)": FunctionFragment;
    "settle(bytes32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "synths(bytes32)": FunctionFragment;
    "synthsByAddress(address)": FunctionFragment;
    "tokenState()": FunctionFragment;
    "totalIssuedSynths(bytes32)": FunctionFragment;
    "totalIssuedSynthsExcludeEtherCollateral(bytes32)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferableSynthetix(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_SYMBOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "anySynthOrSNXRateIsInvalid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableCurrencyKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableSynthCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableSynths",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnSecondary",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSynths",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSynthsOnBehalf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSynthsToTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnSynthsToTargetOnBehalf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "collateral", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collateralisationRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtBalanceOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emitExchangeRebate",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitExchangeReclaim",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitExchangeTracking",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSynthExchange",
    values: [string, BytesLike, BigNumberish, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeOnBehalf",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeOnBehalfWithTracking",
    values: [string, BytesLike, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeWithTracking",
    values: [BytesLike, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeWithTrackingForInitiator",
    values: [BytesLike, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeWithVirtual",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "integrationProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isResolverCached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWaitingPeriod",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueMaxSynths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueMaxSynthsOnBehalf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueSynths",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueSynthsOnBehalf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateDelinquentAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxIssuableSynths",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "messageSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateEscrowBalanceToRewardEscrowV2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintSecondary",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSecondaryRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "proxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebuildCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingIssuableSynths",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resolverAddressesRequired",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setIntegrationProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageSender",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setProxy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenState",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "settle", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "synths", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "synthsByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalIssuedSynths",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalIssuedSynthsExcludeEtherCollateral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferableSynthetix",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN_NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_SYMBOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anySynthOrSNXRateIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableCurrencyKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableSynthCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableSynths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnSecondary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnSynths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnSynthsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSynthsToTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSynthsToTargetOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralisationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitExchangeRebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitExchangeReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitExchangeTracking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitSynthExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeOnBehalfWithTracking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeWithTracking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeWithTrackingForInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeWithVirtual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrationProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResolverCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWaitingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueMaxSynths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueMaxSynthsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueSynths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueSynthsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateDelinquentAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxIssuableSynths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateEscrowBalanceToRewardEscrowV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSecondary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSecondaryRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebuildCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingIssuableSynths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolverAddressesRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIntegrationProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "synths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "synthsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalIssuedSynths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalIssuedSynthsExcludeEtherCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferableSynthetix",
    data: BytesLike
  ): Result;

  events: {
    "AccountLiquidated(address,uint256,uint256,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CacheUpdated(bytes32,address)": EventFragment;
    "ExchangeRebate(address,bytes32,uint256)": EventFragment;
    "ExchangeReclaim(address,bytes32,uint256)": EventFragment;
    "ExchangeTracking(bytes32,bytes32,uint256,uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "ProxyUpdated(address)": EventFragment;
    "SynthExchange(address,bytes32,uint256,bytes32,uint256,address)": EventFragment;
    "TokenStateUpdated(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CacheUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeRebate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeReclaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeTracking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthExchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class SynthetixNetworkToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SynthetixNetworkTokenInterface;

  functions: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<[number]>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<[string]>;

    "TOKEN_NAME()"(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_SYMBOL(overrides?: CallOverrides): Promise<[string]>;

    "TOKEN_SYMBOL()"(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    anySynthOrSNXRateIsInvalid(
      overrides?: CallOverrides
    ): Promise<[boolean] & { anyRateInvalid: boolean }>;

    "anySynthOrSNXRateIsInvalid()"(
      overrides?: CallOverrides
    ): Promise<[boolean] & { anyRateInvalid: boolean }>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableCurrencyKeys(overrides?: CallOverrides): Promise<[string[]]>;

    "availableCurrencyKeys()"(overrides?: CallOverrides): Promise<[string[]]>;

    availableSynthCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "availableSynthCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableSynths(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "availableSynths(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnSynths(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnSynths(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnSynthsOnBehalf(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnSynthsOnBehalf(address,uint256)"(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnSynthsToTarget(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnSynthsToTarget()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnSynthsToTargetOnBehalf(
      burnForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnSynthsToTargetOnBehalf(address)"(
      burnForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateral(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralisationRatio(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "collateralisationRatio(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtBalanceOf(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtBalanceOf(address,bytes32)"(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    emitExchangeRebate(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emitExchangeRebate(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitExchangeReclaim(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emitExchangeReclaim(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitExchangeTracking(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emitExchangeTracking(bytes32,bytes32,uint256,uint256)"(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitSynthExchange(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emitSynthExchange(address,bytes32,uint256,bytes32,uint256,address)"(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchange(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeOnBehalf(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeOnBehalf(address,bytes32,uint256,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeOnBehalfWithTracking(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeOnBehalfWithTracking(address,bytes32,uint256,bytes32,address,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeWithTracking(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeWithTracking(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeWithTrackingForInitiator(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeWithTrackingForInitiator(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeWithVirtual(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeWithVirtual(bytes32,uint256,bytes32,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    integrationProxy(overrides?: CallOverrides): Promise<[string]>;

    "integrationProxy()"(overrides?: CallOverrides): Promise<[string]>;

    isResolverCached(overrides?: CallOverrides): Promise<[boolean]>;

    "isResolverCached()"(overrides?: CallOverrides): Promise<[boolean]>;

    isWaitingPeriod(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWaitingPeriod(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueMaxSynths(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "issueMaxSynths()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueMaxSynthsOnBehalf(
      issueForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "issueMaxSynthsOnBehalf(address)"(
      issueForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueSynths(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "issueSynths(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueSynthsOnBehalf(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "issueSynthsOnBehalf(address,uint256)"(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateDelinquentAccount(
      account: string,
      susdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidateDelinquentAccount(address,uint256)"(
      account: string,
      susdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxIssuable: BigNumber }>;

    "maxIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxIssuable: BigNumber }>;

    messageSender(overrides?: CallOverrides): Promise<[string]>;

    "messageSender()"(overrides?: CallOverrides): Promise<[string]>;

    migrateEscrowBalanceToRewardEscrowV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "migrateEscrowBalanceToRewardEscrowV2()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSecondaryRewards(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintSecondaryRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    proxy(overrides?: CallOverrides): Promise<[string]>;

    "proxy()"(overrides?: CallOverrides): Promise<[string]>;

    rebuildCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebuildCache()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainingIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxIssuable: BigNumber;
        alreadyIssued: BigNumber;
        totalSystemDebt: BigNumber;
      }
    >;

    "remainingIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxIssuable: BigNumber;
        alreadyIssued: BigNumber;
        totalSystemDebt: BigNumber;
      }
    >;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    "resolver()"(overrides?: CallOverrides): Promise<[string]>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    "resolverAddressesRequired()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    sUSD(overrides?: CallOverrides): Promise<[string]>;

    "sUSD()"(overrides?: CallOverrides): Promise<[string]>;

    setIntegrationProxy(
      _integrationProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIntegrationProxy(address)"(
      _integrationProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessageSender(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMessageSender(address)"(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProxy(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProxy(address)"(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenState(
      _tokenState: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTokenState(address)"(
      _tokenState: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "settle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    synths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "synths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    synthsByAddress(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "synthsByAddress(address)"(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenState(overrides?: CallOverrides): Promise<[string]>;

    "tokenState()"(overrides?: CallOverrides): Promise<[string]>;

    totalIssuedSynths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalIssuedSynths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalIssuedSynthsExcludeEtherCollateral(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalIssuedSynthsExcludeEtherCollateral(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferableSynthetix(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { transferable: BigNumber }>;

    "transferableSynthetix(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { transferable: BigNumber }>;
  };

  CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

  "CONTRACT_NAME()"(overrides?: CallOverrides): Promise<string>;

  DECIMALS(overrides?: CallOverrides): Promise<number>;

  "DECIMALS()"(overrides?: CallOverrides): Promise<number>;

  TOKEN_NAME(overrides?: CallOverrides): Promise<string>;

  "TOKEN_NAME()"(overrides?: CallOverrides): Promise<string>;

  TOKEN_SYMBOL(overrides?: CallOverrides): Promise<string>;

  "TOKEN_SYMBOL()"(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anySynthOrSNXRateIsInvalid(overrides?: CallOverrides): Promise<boolean>;

  "anySynthOrSNXRateIsInvalid()"(overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableCurrencyKeys(overrides?: CallOverrides): Promise<string[]>;

  "availableCurrencyKeys()"(overrides?: CallOverrides): Promise<string[]>;

  availableSynthCount(overrides?: CallOverrides): Promise<BigNumber>;

  "availableSynthCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  availableSynths(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "availableSynths(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnSecondary(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnSecondary(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnSynths(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnSynths(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnSynthsOnBehalf(
    burnForAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnSynthsOnBehalf(address,uint256)"(
    burnForAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnSynthsToTarget(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnSynthsToTarget()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnSynthsToTargetOnBehalf(
    burnForAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnSynthsToTargetOnBehalf(address)"(
    burnForAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "collateral(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralisationRatio(
    _issuer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collateralisationRatio(address)"(
    _issuer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtBalanceOf(
    account: string,
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtBalanceOf(address,bytes32)"(
    account: string,
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  emitExchangeRebate(
    account: string,
    currencyKey: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emitExchangeRebate(address,bytes32,uint256)"(
    account: string,
    currencyKey: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitExchangeReclaim(
    account: string,
    currencyKey: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emitExchangeReclaim(address,bytes32,uint256)"(
    account: string,
    currencyKey: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitExchangeTracking(
    trackingCode: BytesLike,
    toCurrencyKey: BytesLike,
    toAmount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emitExchangeTracking(bytes32,bytes32,uint256,uint256)"(
    trackingCode: BytesLike,
    toCurrencyKey: BytesLike,
    toAmount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitSynthExchange(
    account: string,
    fromCurrencyKey: BytesLike,
    fromAmount: BigNumberish,
    toCurrencyKey: BytesLike,
    toAmount: BigNumberish,
    toAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emitSynthExchange(address,bytes32,uint256,bytes32,uint256,address)"(
    account: string,
    fromCurrencyKey: BytesLike,
    fromAmount: BigNumberish,
    toCurrencyKey: BytesLike,
    toAmount: BigNumberish,
    toAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchange(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchange(bytes32,uint256,bytes32)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeOnBehalf(
    exchangeForAddress: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeOnBehalf(address,bytes32,uint256,bytes32)"(
    exchangeForAddress: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeOnBehalfWithTracking(
    exchangeForAddress: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeOnBehalfWithTracking(address,bytes32,uint256,bytes32,address,bytes32)"(
    exchangeForAddress: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeWithTracking(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeWithTracking(bytes32,uint256,bytes32,address,bytes32)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeWithTrackingForInitiator(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeWithTrackingForInitiator(bytes32,uint256,bytes32,address,bytes32)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeWithVirtual(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeWithVirtual(bytes32,uint256,bytes32,bytes32)"(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  integrationProxy(overrides?: CallOverrides): Promise<string>;

  "integrationProxy()"(overrides?: CallOverrides): Promise<string>;

  isResolverCached(overrides?: CallOverrides): Promise<boolean>;

  "isResolverCached()"(overrides?: CallOverrides): Promise<boolean>;

  isWaitingPeriod(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWaitingPeriod(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueMaxSynths(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "issueMaxSynths()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueMaxSynthsOnBehalf(
    issueForAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "issueMaxSynthsOnBehalf(address)"(
    issueForAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueSynths(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "issueSynths(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueSynthsOnBehalf(
    issueForAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "issueSynthsOnBehalf(address,uint256)"(
    issueForAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateDelinquentAccount(
    account: string,
    susdAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidateDelinquentAccount(address,uint256)"(
    account: string,
    susdAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxIssuableSynths(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxIssuableSynths(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messageSender(overrides?: CallOverrides): Promise<string>;

  "messageSender()"(overrides?: CallOverrides): Promise<string>;

  migrateEscrowBalanceToRewardEscrowV2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "migrateEscrowBalanceToRewardEscrowV2()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSecondary(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintSecondary(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSecondaryRewards(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintSecondaryRewards(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proxy(overrides?: CallOverrides): Promise<string>;

  "proxy()"(overrides?: CallOverrides): Promise<string>;

  rebuildCache(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebuildCache()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainingIssuableSynths(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      maxIssuable: BigNumber;
      alreadyIssued: BigNumber;
      totalSystemDebt: BigNumber;
    }
  >;

  "remainingIssuableSynths(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      maxIssuable: BigNumber;
      alreadyIssued: BigNumber;
      totalSystemDebt: BigNumber;
    }
  >;

  resolver(overrides?: CallOverrides): Promise<string>;

  "resolver()"(overrides?: CallOverrides): Promise<string>;

  resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

  "resolverAddressesRequired()"(overrides?: CallOverrides): Promise<string[]>;

  sUSD(overrides?: CallOverrides): Promise<string>;

  "sUSD()"(overrides?: CallOverrides): Promise<string>;

  setIntegrationProxy(
    _integrationProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIntegrationProxy(address)"(
    _integrationProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessageSender(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMessageSender(address)"(
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProxy(
    _proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProxy(address)"(
    _proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenState(
    _tokenState: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTokenState(address)"(
    _tokenState: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "settle(bytes32)"(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  synths(currencyKey: BytesLike, overrides?: CallOverrides): Promise<string>;

  "synths(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  synthsByAddress(
    synthAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "synthsByAddress(address)"(
    synthAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenState(overrides?: CallOverrides): Promise<string>;

  "tokenState()"(overrides?: CallOverrides): Promise<string>;

  totalIssuedSynths(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalIssuedSynths(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalIssuedSynthsExcludeEtherCollateral(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalIssuedSynthsExcludeEtherCollateral(bytes32)"(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferableSynthetix(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "transferableSynthetix(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<string>;

    "CONTRACT_NAME()"(overrides?: CallOverrides): Promise<string>;

    DECIMALS(overrides?: CallOverrides): Promise<number>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<number>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<string>;

    "TOKEN_NAME()"(overrides?: CallOverrides): Promise<string>;

    TOKEN_SYMBOL(overrides?: CallOverrides): Promise<string>;

    "TOKEN_SYMBOL()"(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anySynthOrSNXRateIsInvalid(overrides?: CallOverrides): Promise<boolean>;

    "anySynthOrSNXRateIsInvalid()"(overrides?: CallOverrides): Promise<boolean>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    availableCurrencyKeys(overrides?: CallOverrides): Promise<string[]>;

    "availableCurrencyKeys()"(overrides?: CallOverrides): Promise<string[]>;

    availableSynthCount(overrides?: CallOverrides): Promise<BigNumber>;

    "availableSynthCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    availableSynths(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "availableSynths(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnSynths(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burnSynths(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnSynthsOnBehalf(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnSynthsOnBehalf(address,uint256)"(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnSynthsToTarget(overrides?: CallOverrides): Promise<void>;

    "burnSynthsToTarget()"(overrides?: CallOverrides): Promise<void>;

    burnSynthsToTargetOnBehalf(
      burnForAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnSynthsToTargetOnBehalf(address)"(
      burnForAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collateral(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "collateral(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralisationRatio(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralisationRatio(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtBalanceOf(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtBalanceOf(address,bytes32)"(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    emitExchangeRebate(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitExchangeRebate(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitExchangeReclaim(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitExchangeReclaim(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitExchangeTracking(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitExchangeTracking(bytes32,bytes32,uint256,uint256)"(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSynthExchange(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitSynthExchange(address,bytes32,uint256,bytes32,uint256,address)"(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exchange(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeOnBehalf(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeOnBehalf(address,bytes32,uint256,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeOnBehalfWithTracking(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeOnBehalfWithTracking(address,bytes32,uint256,bytes32,address,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeWithTracking(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeWithTracking(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeWithTrackingForInitiator(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchangeWithTrackingForInitiator(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeWithVirtual(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { amountReceived: BigNumber; vSynth: string }
    >;

    "exchangeWithVirtual(bytes32,uint256,bytes32,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { amountReceived: BigNumber; vSynth: string }
    >;

    integrationProxy(overrides?: CallOverrides): Promise<string>;

    "integrationProxy()"(overrides?: CallOverrides): Promise<string>;

    isResolverCached(overrides?: CallOverrides): Promise<boolean>;

    "isResolverCached()"(overrides?: CallOverrides): Promise<boolean>;

    isWaitingPeriod(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWaitingPeriod(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueMaxSynths(overrides?: CallOverrides): Promise<void>;

    "issueMaxSynths()"(overrides?: CallOverrides): Promise<void>;

    issueMaxSynthsOnBehalf(
      issueForAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "issueMaxSynthsOnBehalf(address)"(
      issueForAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issueSynths(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "issueSynths(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issueSynthsOnBehalf(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "issueSynthsOnBehalf(address,uint256)"(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateDelinquentAccount(
      account: string,
      susdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "liquidateDelinquentAccount(address,uint256)"(
      account: string,
      susdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageSender(overrides?: CallOverrides): Promise<string>;

    "messageSender()"(overrides?: CallOverrides): Promise<string>;

    migrateEscrowBalanceToRewardEscrowV2(
      overrides?: CallOverrides
    ): Promise<void>;

    "migrateEscrowBalanceToRewardEscrowV2()"(
      overrides?: CallOverrides
    ): Promise<void>;

    mint(overrides?: CallOverrides): Promise<boolean>;

    "mint()"(overrides?: CallOverrides): Promise<boolean>;

    mintSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintSecondaryRewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintSecondaryRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proxy(overrides?: CallOverrides): Promise<string>;

    "proxy()"(overrides?: CallOverrides): Promise<string>;

    rebuildCache(overrides?: CallOverrides): Promise<void>;

    "rebuildCache()"(overrides?: CallOverrides): Promise<void>;

    remainingIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxIssuable: BigNumber;
        alreadyIssued: BigNumber;
        totalSystemDebt: BigNumber;
      }
    >;

    "remainingIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxIssuable: BigNumber;
        alreadyIssued: BigNumber;
        totalSystemDebt: BigNumber;
      }
    >;

    resolver(overrides?: CallOverrides): Promise<string>;

    "resolver()"(overrides?: CallOverrides): Promise<string>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<string[]>;

    "resolverAddressesRequired()"(overrides?: CallOverrides): Promise<string[]>;

    sUSD(overrides?: CallOverrides): Promise<string>;

    "sUSD()"(overrides?: CallOverrides): Promise<string>;

    setIntegrationProxy(
      _integrationProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIntegrationProxy(address)"(
      _integrationProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageSender(sender: string, overrides?: CallOverrides): Promise<void>;

    "setMessageSender(address)"(
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxy(_proxy: string, overrides?: CallOverrides): Promise<void>;

    "setProxy(address)"(
      _proxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenState(
      _tokenState: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenState(address)"(
      _tokenState: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimed: BigNumber;
        refunded: BigNumber;
        numEntriesSettled: BigNumber;
      }
    >;

    "settle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimed: BigNumber;
        refunded: BigNumber;
        numEntriesSettled: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    synths(currencyKey: BytesLike, overrides?: CallOverrides): Promise<string>;

    "synths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    synthsByAddress(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "synthsByAddress(address)"(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenState(overrides?: CallOverrides): Promise<string>;

    "tokenState()"(overrides?: CallOverrides): Promise<string>;

    totalIssuedSynths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalIssuedSynths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalIssuedSynthsExcludeEtherCollateral(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalIssuedSynthsExcludeEtherCollateral(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferableSynthetix(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferableSynthetix(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AccountLiquidated(
      account: string | null,
      snxRedeemed: null,
      amountLiquidated: null,
      liquidator: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        account: string;
        snxRedeemed: BigNumber;
        amountLiquidated: BigNumber;
        liquidator: string;
      }
    >;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    CacheUpdated(
      name: null,
      destination: null
    ): TypedEventFilter<
      [string, string],
      { name: string; destination: string }
    >;

    ExchangeRebate(
      account: string | null,
      currencyKey: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; currencyKey: string; amount: BigNumber }
    >;

    ExchangeReclaim(
      account: string | null,
      currencyKey: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; currencyKey: string; amount: BigNumber }
    >;

    ExchangeTracking(
      trackingCode: BytesLike | null,
      toCurrencyKey: null,
      toAmount: null,
      fee: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        trackingCode: string;
        toCurrencyKey: string;
        toAmount: BigNumber;
        fee: BigNumber;
      }
    >;

    OwnerChanged(
      oldOwner: null,
      newOwner: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerNominated(
      newOwner: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    ProxyUpdated(
      proxyAddress: null
    ): TypedEventFilter<[string], { proxyAddress: string }>;

    SynthExchange(
      account: string | null,
      fromCurrencyKey: null,
      fromAmount: null,
      toCurrencyKey: null,
      toAmount: null,
      toAddress: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, string],
      {
        account: string;
        fromCurrencyKey: string;
        fromAmount: BigNumber;
        toCurrencyKey: string;
        toAmount: BigNumber;
        toAddress: string;
      }
    >;

    TokenStateUpdated(
      newTokenState: null
    ): TypedEventFilter<[string], { newTokenState: string }>;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_SYMBOL(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_SYMBOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anySynthOrSNXRateIsInvalid(overrides?: CallOverrides): Promise<BigNumber>;

    "anySynthOrSNXRateIsInvalid()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableCurrencyKeys(overrides?: CallOverrides): Promise<BigNumber>;

    "availableCurrencyKeys()"(overrides?: CallOverrides): Promise<BigNumber>;

    availableSynthCount(overrides?: CallOverrides): Promise<BigNumber>;

    "availableSynthCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    availableSynths(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableSynths(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnSynths(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnSynths(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnSynthsOnBehalf(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnSynthsOnBehalf(address,uint256)"(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnSynthsToTarget(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnSynthsToTarget()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnSynthsToTargetOnBehalf(
      burnForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnSynthsToTargetOnBehalf(address)"(
      burnForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "collateral(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralisationRatio(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralisationRatio(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtBalanceOf(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtBalanceOf(address,bytes32)"(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    emitExchangeRebate(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emitExchangeRebate(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitExchangeReclaim(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emitExchangeReclaim(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitExchangeTracking(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emitExchangeTracking(bytes32,bytes32,uint256,uint256)"(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitSynthExchange(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emitSynthExchange(address,bytes32,uint256,bytes32,uint256,address)"(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchange(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeOnBehalf(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeOnBehalf(address,bytes32,uint256,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeOnBehalfWithTracking(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeOnBehalfWithTracking(address,bytes32,uint256,bytes32,address,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeWithTracking(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeWithTracking(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeWithTrackingForInitiator(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeWithTrackingForInitiator(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeWithVirtual(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeWithVirtual(bytes32,uint256,bytes32,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    integrationProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "integrationProxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    isResolverCached(overrides?: CallOverrides): Promise<BigNumber>;

    "isResolverCached()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWaitingPeriod(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWaitingPeriod(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueMaxSynths(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "issueMaxSynths()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueMaxSynthsOnBehalf(
      issueForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "issueMaxSynthsOnBehalf(address)"(
      issueForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueSynths(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "issueSynths(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueSynthsOnBehalf(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "issueSynthsOnBehalf(address,uint256)"(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateDelinquentAccount(
      account: string,
      susdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidateDelinquentAccount(address,uint256)"(
      account: string,
      susdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageSender(overrides?: CallOverrides): Promise<BigNumber>;

    "messageSender()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrateEscrowBalanceToRewardEscrowV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "migrateEscrowBalanceToRewardEscrowV2()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSecondaryRewards(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintSecondaryRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxy(overrides?: CallOverrides): Promise<BigNumber>;

    "proxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebuildCache()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainingIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    "resolver()"(overrides?: CallOverrides): Promise<BigNumber>;

    resolverAddressesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    "resolverAddressesRequired()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "sUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    setIntegrationProxy(
      _integrationProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIntegrationProxy(address)"(
      _integrationProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessageSender(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMessageSender(address)"(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProxy(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProxy(address)"(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenState(
      _tokenState: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTokenState(address)"(
      _tokenState: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "settle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    synths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "synths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthsByAddress(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "synthsByAddress(address)"(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenState(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenState()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalIssuedSynths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalIssuedSynths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalIssuedSynthsExcludeEtherCollateral(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalIssuedSynthsExcludeEtherCollateral(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferableSynthetix(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transferableSynthetix(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT_NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOKEN_NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_SYMBOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOKEN_SYMBOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anySynthOrSNXRateIsInvalid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "anySynthOrSNXRateIsInvalid()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableCurrencyKeys(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableCurrencyKeys()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableSynthCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableSynthCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    availableSynths(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableSynths(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnSynths(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnSynths(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnSynthsOnBehalf(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnSynthsOnBehalf(address,uint256)"(
      burnForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnSynthsToTarget(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnSynthsToTarget()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnSynthsToTargetOnBehalf(
      burnForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnSynthsToTargetOnBehalf(address)"(
      burnForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateral(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralisationRatio(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralisationRatio(address)"(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtBalanceOf(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtBalanceOf(address,bytes32)"(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitExchangeRebate(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emitExchangeRebate(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitExchangeReclaim(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emitExchangeReclaim(address,bytes32,uint256)"(
      account: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitExchangeTracking(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emitExchangeTracking(bytes32,bytes32,uint256,uint256)"(
      trackingCode: BytesLike,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitSynthExchange(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emitSynthExchange(address,bytes32,uint256,bytes32,uint256,address)"(
      account: string,
      fromCurrencyKey: BytesLike,
      fromAmount: BigNumberish,
      toCurrencyKey: BytesLike,
      toAmount: BigNumberish,
      toAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchange(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchange(bytes32,uint256,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeOnBehalf(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeOnBehalf(address,bytes32,uint256,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeOnBehalfWithTracking(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeOnBehalfWithTracking(address,bytes32,uint256,bytes32,address,bytes32)"(
      exchangeForAddress: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeWithTracking(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeWithTracking(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeWithTrackingForInitiator(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeWithTrackingForInitiator(bytes32,uint256,bytes32,address,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeWithVirtual(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeWithVirtual(bytes32,uint256,bytes32,bytes32)"(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    integrationProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "integrationProxy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isResolverCached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isResolverCached()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWaitingPeriod(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWaitingPeriod(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueMaxSynths(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "issueMaxSynths()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueMaxSynthsOnBehalf(
      issueForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "issueMaxSynthsOnBehalf(address)"(
      issueForAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueSynths(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "issueSynths(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueSynthsOnBehalf(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "issueSynthsOnBehalf(address,uint256)"(
      issueForAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateDelinquentAccount(
      account: string,
      susdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidateDelinquentAccount(address,uint256)"(
      account: string,
      susdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "messageSender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateEscrowBalanceToRewardEscrowV2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "migrateEscrowBalanceToRewardEscrowV2()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSecondary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintSecondary(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSecondaryRewards(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintSecondaryRewards(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCache(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebuildCache()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainingIssuableSynths(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingIssuableSynths(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "resolver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolverAddressesRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolverAddressesRequired()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sUSD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIntegrationProxy(
      _integrationProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIntegrationProxy(address)"(
      _integrationProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessageSender(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMessageSender(address)"(
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProxy(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProxy(address)"(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenState(
      _tokenState: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTokenState(address)"(
      _tokenState: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "settle(bytes32)"(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "synths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthsByAddress(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "synthsByAddress(address)"(
      synthAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalIssuedSynths(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalIssuedSynths(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalIssuedSynthsExcludeEtherCollateral(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalIssuedSynthsExcludeEtherCollateral(bytes32)"(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferableSynthetix(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transferableSynthetix(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
